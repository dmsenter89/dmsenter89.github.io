<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>linux | Michael&#39;s Site</title>
    <link>https://dmsenter89.github.io/tag/linux/</link>
      <atom:link href="https://dmsenter89.github.io/tag/linux/index.xml" rel="self" type="application/rss+xml" />
    <description>linux</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Mon, 18 Dec 2023 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://dmsenter89.github.io/images/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_2.png</url>
      <title>linux</title>
      <link>https://dmsenter89.github.io/tag/linux/</link>
    </image>
    
    <item>
      <title>Automatic Suspend in Fedora 38</title>
      <link>https://dmsenter89.github.io/post/23-12-automatic-suspend-in-fedora-38/</link>
      <pubDate>Mon, 18 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://dmsenter89.github.io/post/23-12-automatic-suspend-in-fedora-38/</guid>
      <description>&lt;p&gt;For a while now I&amp;rsquo;ve recycled an old iMac running Fedora Workstation as a simple homeserver. It&amp;rsquo;s been working well in the past, but just now with the EOL of Fedora 37 did I get around to updating from Fedora 36 to Fedora 38.&lt;/p&gt;
&lt;p&gt;Unfortuantely for my use case, there is an unannounced change in Gnome&amp;rsquo;s powersettings when moving to Fedora 38 from 37. See the 
&lt;a href=&#34;https://discussion.fedoraproject.org/t/gnome-suspends-after-15-minutes-of-user-inactivity-even-on-ac-power/79801&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;fedora forum&lt;/a&gt; for a description of the issue and a suggested fix. Unforunately, for me at least, the suggested fix doesn&amp;rsquo;t work and my system would still suspend, even with it disabled via the suggested commands. I had to use gsettings directly from my user account in addition to the the linked fix to get it to work and persist.&lt;/p&gt;
&lt;p&gt;Only a couple of weeks after getting this fixed, that workstation suffered a hard drive failure that caused it to become unbootable. I have sinced scrapped that workstation and bought a 
&lt;a href=&#34;https://www.bee-link.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Beelink&lt;/a&gt; mini-pc for about $200. I&amp;rsquo;m running Arch Linux on it.&lt;/p&gt;
&lt;p&gt;I had previously used Arch extensively as my daily driver and for various other machines, and never had problems with. My recent Fedora experience really drove me back to committing to Arch. Does Arch take longer to install and set up than Fedora? Sure. But it&amp;rsquo;s well documented and you actually understand the system you have and what packages are on it. It&amp;rsquo;s actually a transparent system, unlike the convenience-packaged distros with all their preinstalled stuff. You see so many people online worried about Arch not being &amp;ldquo;stable,&amp;rdquo; but in over ten years with different desktops and laptops running on Arch I haven&amp;rsquo;t had any major issues. Truth be told, I&amp;rsquo;ve had fewer issues with Arch than in the past five years with Ubuntu and Fedora systems.&lt;/p&gt;
&lt;p&gt;A particular example of something nice about Arch Linux: I have a ten year old workstation running on Arch that hadn&amp;rsquo;t booted in 4 years. The only difficulty in getting it up and running again was updating the archlinux-keyring for pacman. That didn&amp;rsquo;t take long and was well-documented. Since then, it&amp;rsquo;s humming along great with more up-to-date software than recent Ubuntu releases. Updating Fedora from 36 to 38 on the other hand was much more of a hassle. I had multiple reboots, hunting for what default packages changed, what changed without being documented, etc. My older Arch system got up and running in no time after scanning through the Arch Linux news for any required manual interventions that popped up in the past few years. Arch for the win.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Setting up a Virtual Lab Computer</title>
      <link>https://dmsenter89.github.io/post/23-01-virtual-lab/</link>
      <pubDate>Fri, 06 Jan 2023 19:00:00 +0000</pubDate>
      <guid>https://dmsenter89.github.io/post/23-01-virtual-lab/</guid>
      <description>&lt;p&gt;Dealing with computer resources in a modern lab can be tricky. Even if all participating researchers have laptops, a central location for storage or to host licensed software is desirable. While a physical computer can be setup for such a use, that is not always the most desirable solution. We want multiple people to have concurrent access to our resources while providing safe, sandboxed environments. Sometimes lab members want/need root access to learn certain tasks, but we don&amp;rsquo;t want them to accidentally take down our carefully configured systems. This leads us to the idea of containerization which can provide various failsafes. In this post, we will be setting up the 
&lt;a href=&#34;https://wiki.archlinux.org/title/LXD&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;LXD (ArchWiki)&lt;/a&gt; environment as a virtual lab computer. This solution gives an entire working system, including systemd, similar to but more lightweight than VirtualBox.&lt;/p&gt;
&lt;p&gt;Setting up a successful virtual computer is very similar to setting up a regular Linux machine, with some minor LXD overhead. Note that only the individual administering the containers will need to deal with that LXD overhead. From the point of view of the end user, it&amp;rsquo;ll look the same as if they were interacting with a &amp;ldquo;regular&amp;rdquo; computer.  This post deals with the setup from the point of view of the admin. The lab members should be setup as users inside the container and can then SSH into the container or use VNC if a GUI is needed, similar to how they interact with a regular remote computer.&lt;/p&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#install-and-setup-of-lxd&#34;&gt;Install and Setup of LXD&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#container-setup&#34;&gt;Container Setup&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#getting-the-image&#34;&gt;Getting the Image&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#basic-container-management&#34;&gt;Basic Container Management&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#setting-up-the-container&#34;&gt;Setting up the Container&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#networking&#34;&gt;Networking&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#giving-the-container-access-to-the-internet&#34;&gt;Giving the Container Access to the Internet&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#network-forwarding&#34;&gt;Network Forwarding&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#getting-a-gui-running&#34;&gt;Getting a GUI Running&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;

&lt;h2 id=&#34;install-and-setup-of-lxd&#34;&gt;Install and Setup of LXD&lt;/h2&gt;
&lt;p&gt;LXD can be installed from a snap with &lt;code&gt;sudo snap install lxd&lt;/code&gt;, but that requires you to have snap running. On Arch, LXD is available in the repos with &lt;code&gt;pacman -S lxd&lt;/code&gt;. To get a RPM install in Fedora, you&amp;rsquo;ll need to use an additional COPR repository like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;dnf copr enable ganto/lxc4
dnf install lxd
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once installed, you&amp;rsquo;ll need to either enable the &lt;code&gt;lxd.socket&lt;/code&gt; or &lt;code&gt;lxd.service&lt;/code&gt; (if you want instances to be able to autostart). You&amp;rsquo;ll want to modify the subuid and subgid files so you can run unpriviliged containers (recommended), e.g.:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# for root user and systemd:
usermod -v 1000000-1000999999 -w 1000000-1000999999 root 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With this done, run &lt;code&gt;lxd init&lt;/code&gt; to go through a configuration guide for your new setup. If this is your first time using LXD, you will likely be fine just using the default settings, except maybe the size of the storage pool - but you can always attach other storage to your containers later, so if you will run tasks producing a lot of data you might want to consider just mounting a dedicated filesystem later. If you have multiple computers available in your lab, you might want to consider turning on 
&lt;a href=&#34;https://linuxcontainers.org/lxd/docs/latest/explanation/clustering/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;clustering (documentation)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For more details, see the 
&lt;a href=&#34;https://wiki.archlinux.org/title/LXD#Setup&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ArchWiki&lt;/a&gt; or the 
&lt;a href=&#34;https://linuxcontainers.org/lxd/getting-started-cli/#initial-configuration&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Official Getting Started Guide&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;container-setup&#34;&gt;Container Setup&lt;/h2&gt;
&lt;h3 id=&#34;getting-the-image&#34;&gt;Getting the Image&lt;/h3&gt;
&lt;p&gt;The first step in setting up a container is picking a suitable image to start from. Similar to Docker, many distributions are available to chose from. There are also arm and amd64 images available, so you can pick what works with your platform. To list available images on the image server, use the syntax &lt;code&gt;lxc image list images:&amp;lt;keyword&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# ArchLinux images:
lxc image list images:archlinux amd64 
# Fedora images, using key/value pairs:
lxc image list images:fedora arch=amd64 type=container
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To create a new image without starting it, use &lt;code&gt;lxc init &amp;lt;image&amp;gt; &amp;lt;container-name&amp;gt;&lt;/code&gt;. To both initialize and start a new container, use &lt;code&gt;lxc init &amp;lt;image&amp;gt; &amp;lt;container-name&amp;gt;&lt;/code&gt;. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# create a base image called myarch without starting:
lxc init images:archlinux myarch
# you can also specify version and arch, e.g. Fedora 36 / 64bit:
lxc init images:fedora/36/amd64 myfedora
# create and launch an image:
lxc init images:rockylinux/9 myrocky
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that you can have a large number of concurrent containers in use, which may but need not share the same base image. This can be useful for larger teams, where you can setup systems for particular tasks or projects. For example, you could have a main machine for your graduate students, a separate one for people moving in and out of the lab like REU students, and a third container for a class that you&amp;rsquo;re teaching to use.&lt;/p&gt;
&lt;h3 id=&#34;basic-container-management&#34;&gt;Basic Container Management&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Starting, stopping etc. is intuitive
lxc start   &amp;lt;container&amp;gt; # starts container
lxc stop    &amp;lt;container&amp;gt; [--force] # stops the container
lxc restart &amp;lt;container&amp;gt; [--force] # restart
lxc pause   &amp;lt;container&amp;gt; # send SIGSTOP to all container processes

# what containers do I have?
lxc list 
lxc info myarch # get detailed info about this container
lxc copy &amp;lt;name1&amp;gt; &amp;lt;name2&amp;gt; # make a copy of an existing container
lxc delete &amp;lt;container&amp;gt; [--force]

# edit container configuration
lxc config edit &amp;lt;container&amp;gt; # launches config in VISUAL editor
lxc config set &amp;lt;container&amp;gt; &amp;lt;key&amp;gt; &amp;lt;value&amp;gt;  # change a single config item
lxc config device add &amp;lt;container&amp;gt; &amp;lt;dev&amp;gt; &amp;lt;type&amp;gt; &amp;lt;key&amp;gt;=&amp;lt;value&amp;gt;
lxc config show [--expanded] &amp;lt;container&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In addition to these commmands, you can also snapshot your containers. This creates a restorable copy of your container in case something bad happens - like someone typing &lt;code&gt;rm -rf *&lt;/code&gt; into the wrong root shell. By default, snapshots are named in a numbered pattern snapX where X is an integer.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;lxc snapshot &amp;lt;container&amp;gt; &amp;lt;snap&amp;gt; # create new snapshot
lxc restore  &amp;lt;container&amp;gt; &amp;lt;snap&amp;gt; # restore container to snapshot
lxc copy &amp;lt;container&amp;gt;/&amp;lt;snap&amp;gt; &amp;lt;new-container&amp;gt; # new container from snapshot
lxc delete &amp;lt;container&amp;gt;/&amp;lt;snap&amp;gt;   # delete the snapshot
lxc info &amp;lt;container&amp;gt;            # lists available snapshots, plus other info
lxc move &amp;lt;container&amp;gt;/&amp;lt;snap&amp;gt; &amp;lt;container&amp;gt;/&amp;lt;new-snap&amp;gt; # rename snapshot
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;setting-up-the-container&#34;&gt;Setting up the Container&lt;/h3&gt;
&lt;p&gt;You can enter your container immediately with a root shell with &lt;code&gt;lxc shell &amp;lt;container&amp;gt;&lt;/code&gt; and proceed with your regular setup, such as updating and installing packages, setting up new users, etc. To make this process more repeatedly, you can also just move a setup script from the host to the container first, and then execute that script inside the container. That way you can have a record of what you did when you first set up the container.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# drop into root shell
lxc shell &amp;lt;container&amp;gt;
# execute arbitrary command in container
lxc exec &amp;lt;container&amp;gt; -- &amp;lt;program&amp;gt; [&amp;lt;options&amp;gt;]

# move a file from host to container
lxc file push /host/file &amp;lt;container&amp;gt;/path/on/container 
# move a file from container to host
lxc file pull &amp;lt;container&amp;gt;/path/to/file /path/on/host
# edit a file inside container
lxc file edit &amp;lt;container&amp;gt;/etc/passwd 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;See my earlier blog post for a list of 
&lt;a href=&#34;https://dmsenter89.github.io/post/22-12-some-cli-tools/&#34;&gt;some CLI tools&lt;/a&gt; I like to install on new systems.&lt;/p&gt;
&lt;h2 id=&#34;networking&#34;&gt;Networking&lt;/h2&gt;
&lt;h3 id=&#34;giving-the-container-access-to-the-internet&#34;&gt;Giving the Container Access to the Internet&lt;/h3&gt;
&lt;p&gt;The first step in container networking is to make sure your container can access the network. This may require your firewall to let traffic through on the default bridge. On an ArchLinux host, use&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;ufw route allow in on lxdbr0
ufw allow in on lxdbr0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;while on a Fedora host you might use&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;firewall-cmd --zone=trusted --change-interface=lxdbr0 --permanent
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;network-forwarding&#34;&gt;Network Forwarding&lt;/h3&gt;
&lt;p&gt;At this point your container is available from the host on wich the LXD service is running. But the whole point of the exercise is to make the container accessible from the lab members&#39; various devices. I&amp;rsquo;ll present two options here for setting this up, depending on whether you need access from outside of your local network or not. Either way, make sure SSH is 
&lt;a href=&#34;https://wiki.archlinux.org/title/OpenSSH&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;set up&lt;/a&gt; inside your container and you can SSH into the container from the host shell. Both methods rely on using the network forward feature built into LXD. See the 
&lt;a href=&#34;https://linuxcontainers.org/lxd/docs/master/howto/network_forwards/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;documentation&lt;/a&gt; for details.&lt;/p&gt;
&lt;p&gt;For network forwarding to work we need to know two things about our container: what device our container is using to connect to the internet; on a default setup, this will be lxdbr0 but check with &lt;code&gt;lxc network list&lt;/code&gt; to be sure. The second item we need is the IP address of our container, which can be displayed with &lt;code&gt;lxc list &amp;lt;container&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The next item we need is an IP address to forward from. We can either get an IP address dedicated to the container, or hijack some ports from our host for re-routing.&lt;/p&gt;
&lt;p&gt;To add a second IP to your existing network device, use the &lt;code&gt;ip a&lt;/code&gt; command to find the device name (on your host) of the network device connected to your network. If you use wifi, this might be something like wlp4s0 or similar. Then pick an IP not otherwise assigned by the router and assign it to this device - in addition to the existing IP - using the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;ip -4 a add dev &amp;lt;device-name&amp;gt; &amp;lt;free-ip&amp;gt;/24
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that this will only persist until the host reboots. You can then create a network forward on the container&amp;rsquo;s device (e.g., lxdbr0) with the newly assigned IP as the listening address. Using this command will let the container handle all incoming traffic to the new IP:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;lxc network forward create lxdbr0 &amp;lt;listening_address&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can then edit the target address with&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;lxc network forward edit lxdbr0 &amp;lt;listening_address&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and specify the container&amp;rsquo;s IP as the &lt;code&gt;target_address&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The alternative method is to use the host&amp;rsquo;s IP as the listening address and then just forward particular ports to the container, e.g. port 22 for SSH or 590x for VNC servers. This way you skip creating the second IP above, and just start by creating and editing a network forward with the the host IP as listening address. The edit can then list the ports you want forwarded. Here&amp;rsquo;s an example of a valid file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;description: Sample Forward
config: {}
ports:
- description: ssh
  protocol: tcp
  listen_port: &amp;quot;10022&amp;quot;  # any unused host port
  target_port: &amp;quot;22&amp;quot;    
  target_address: &amp;lt;container-ip&amp;gt;
- description: VNC servers
  protocol: tcp
  listen_port:  105901-105904 # any unused host port
  target_port:  5901-5904   
  target_address: &amp;lt;container-ip&amp;gt;
listen_address: &amp;lt;host-ip&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Aside from these forwards, you may consider setting up a 
&lt;a href=&#34;https://wiki.archlinux.org/title/Postfix&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;postfix&lt;/a&gt; server and associated forward so you can use the mail command to programmatically send emails to users. One great use case for this is the sending of log files after completion of long running jobs. This keeps your users from needing to manually log in and check the status of their jobs. If you have used HPC services at your campus, you may have experienced the utility of this first hand.&lt;/p&gt;
&lt;p&gt;Network forwarding options are explained in more detail in the 
&lt;a href=&#34;https://linuxcontainers.org/lxd/docs/master/howto/network_forwards/#&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;documentation&lt;/a&gt;, which also contains a link to a short YouTube video demonstring these commands in a shell session.&lt;/p&gt;
&lt;h2 id=&#34;getting-a-gui-running&#34;&gt;Getting a GUI Running&lt;/h2&gt;
&lt;p&gt;First, think about whether the tools you use require a GUI. A lot of research work can be done entirely within the command line or by using servers with particular software. So instead of installing a regular RStudio instance, you could install RStudio Server. Jupyter is already designed around the client/server model, as are RDBMS systems. If your team doesn&amp;rsquo;t feel comfortable with ViM and prefers VS Code, use the 
&lt;a href=&#34;https://code.visualstudio.com/docs/remote/ssh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;remote extension&lt;/a&gt; to use a VS Code server that can be opened up from your teams&#39; local computers using SSH.&lt;/p&gt;
&lt;p&gt;If you only need a GUI to use one GUI app at a time, say Mathematica/Matlab, then the simplest option will be to use X-forwarding via SSH. Make sure that &lt;code&gt;X11Forwarding yes&lt;/code&gt; is set in your sshd_config file and restart the sshd service to turn it on. You&amp;rsquo;ll also need to install &lt;code&gt;xorg-xauth&lt;/code&gt; on an ArchLinux container. From then on, connecting via  SSH with the &lt;code&gt;-X&lt;/code&gt; flag should work as desired.&lt;/p&gt;
&lt;p&gt;If you need an entire desktop environment available, you can set up 
&lt;a href=&#34;https://wiki.archlinux.org/title/TigerVNC&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;VNC&lt;/a&gt; or 
&lt;a href=&#34;https://wiki.archlinux.org/title/NoMachine&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;NoMachine&lt;/a&gt; the same way you would for a regular system. I have seen a lot of comments arguing for NoMachine being more performant, but the default TigerVNC on Arch/Fedora has worked sufficiently well for most of my needs.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Some CLI Tools</title>
      <link>https://dmsenter89.github.io/post/22-12-some-cli-tools/</link>
      <pubDate>Wed, 07 Dec 2022 15:38:16 +0000</pubDate>
      <guid>https://dmsenter89.github.io/post/22-12-some-cli-tools/</guid>
      <description>&lt;p&gt;There are certain CLI tools that I find myself installing whenever I set up a new system. I&amp;rsquo;m not talking about the general system setup, like installing vim or Python, but some drop-in replacements for older Linux tools and some cli solutions that I use quite regularly. I thought I would collect them here for convenience. The headers are sorted alphabetically, except that &amp;ldquo;Other&amp;rdquo; is last because that seems most sensible.&lt;/p&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#better-drop-ins&#34;&gt;&amp;ldquo;Better&amp;rdquo; Drop-Ins&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#data-and-file-wrangling&#34;&gt;Data and File Wrangling&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#development&#34;&gt;Development&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#resource-management&#34;&gt;Resource Management&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#other&#34;&gt;Other&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;

&lt;h2 id=&#34;better-drop-ins&#34;&gt;&amp;ldquo;Better&amp;rdquo; Drop-Ins&lt;/h2&gt;
&lt;p&gt;The following tools I use as &amp;ldquo;better&amp;rdquo; drop-ins for other commands. Instead of &lt;code&gt;ls&lt;/code&gt;, I typically now use 
&lt;a href=&#34;https://github.com/ogham/exa&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;exa&lt;/a&gt;. Instead of grep, I tend to use 
&lt;a href=&#34;https://github.com/BurntSushi/ripgrep&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ripgrep&lt;/a&gt;. Instead of &lt;code&gt;find&lt;/code&gt;, I tend to use 
&lt;a href=&#34;https://github.com/sharkdp/fd&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;fd&lt;/a&gt;. For quick viewing of text-files with syntax highlighting, I like 
&lt;a href=&#34;https://github.com/sharkdp/bat&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;bat&lt;/a&gt; over &lt;code&gt;cat&lt;/code&gt;. As a git/diff pager with syntax highlighting I use 
&lt;a href=&#34;https://github.com/dandavison/delta&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;delta&lt;/a&gt;. All of these tools are written in Rust. The old &lt;code&gt;df&lt;/code&gt; command can be improved with 
&lt;a href=&#34;https://github.com/muesli/duf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;duf&lt;/a&gt;, a Go implementation with output that&amp;rsquo;s nicer to read (and alternatively, outputs as JSON).&lt;/p&gt;
&lt;h2 id=&#34;data-and-file-wrangling&#34;&gt;Data and File Wrangling&lt;/h2&gt;
&lt;h4 id=&#34;calculator&#34;&gt;Calculator&lt;/h4&gt;
&lt;p&gt;A great CLI calculator implemented in C++ is 
&lt;a href=&#34;https://qalculate.github.io/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Qalculate!&lt;/a&gt;. It is mainly intended to be run with a Qt or GTK GUI, but does include a CLI version that can be invoked with &lt;code&gt;qalc&lt;/code&gt;. A Rusty alternative is 
&lt;a href=&#34;https://github.com/tiffany352/rink-rs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;rink&lt;/a&gt;. A benefit of rink is that if you are trying to convert incompatible units, it will make a suggestion for a transformation that makes each side compatible, which can help with dimensional analysis. A good Rusty calculator app without units but wide support of operations, including functions, is 
&lt;a href=&#34;https://github.com/PaddiM8/kalker&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;kalker&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&#34;csv-and-json&#34;&gt;CSV and JSON&lt;/h4&gt;
&lt;p&gt;CSV files are ubiquitous, and being able to manipulate them and get an overview of what is contained without needing to actually load them in Excel/Python/SAS/etc is very useful. I used to really like 
&lt;a href=&#34;https://csvkit.readthedocs.io/en/latest/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;csvkit&lt;/a&gt; for that. The main drawback here is speed for large CSV files, due to it being implemented in Python. A must faster program written in Rust is 
&lt;a href=&#34;https://github.com/jqnatividad/qsv&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;qsv&lt;/a&gt;, successor to BurntSushi&amp;rsquo;s 
&lt;a href=&#34;https://github.com/BurntSushi/xsv&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;xsv&lt;/a&gt;. It has more features than csvkit, is faster, and seems more flexible.&lt;/p&gt;
&lt;p&gt;Another cool Python program for interacting with CSV files is 
&lt;a href=&#34;https://www.visidata.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;visidata&lt;/a&gt;. It is a CSV viewer that doubles as a spreadsheet program, allows you to make plots and statistics and just do a ton of different things with your file in-memory.&lt;/p&gt;
&lt;p&gt;The C program 
&lt;a href=&#34;https://github.com/stedolan/jq&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;jq&lt;/a&gt; aims to be the &lt;code&gt;sed&lt;/code&gt; of working with JSON files.&lt;/p&gt;
&lt;h4 id=&#34;file-managers&#34;&gt;File Managers&lt;/h4&gt;
&lt;p&gt;There are &lt;em&gt;a lot&lt;/em&gt; of file managers to choose from these days. There are lots of popular options like mc, ranger, nnn, but I tend to keep falling back on 
&lt;a href=&#34;https://github.com/vifm/vifm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;vifm&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;development&#34;&gt;Development&lt;/h2&gt;
&lt;p&gt;If you need to benchmark something, try Rusty old 
&lt;a href=&#34;https://github.com/sharkdp/hyperfine&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Hyperfine&lt;/a&gt;. There is an interesting make alternative called 
&lt;a href=&#34;https://github.com/casey/just&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;just&lt;/a&gt;, which looks promising but I haven&amp;rsquo;t played with it yet.&lt;/p&gt;
&lt;h2 id=&#34;resource-management&#34;&gt;Resource Management&lt;/h2&gt;
&lt;h4 id=&#34;disk-space&#34;&gt;Disk Space&lt;/h4&gt;
&lt;p&gt;There are several excellent tools here. One that can be found in most repos I&amp;rsquo;ve encountered is 
&lt;a href=&#34;https://dev.yorhel.nl/ncdu&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ncdu&lt;/a&gt;, a disk usage analyzer with an ncurses interface written in C. It is reasonably fast and let&amp;rsquo;s you interactively delete folders while you&amp;rsquo;re at it. A parallel implementation of the same idea but written in Go can be found with 
&lt;a href=&#34;https://github.com/dundee/gdu&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gdu&lt;/a&gt;. For non-interactive use, 
&lt;a href=&#34;https://github.com/bootandy/dust&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;dust&lt;/a&gt; (du + rust) is available.&lt;/p&gt;
&lt;h4 id=&#34;system-status---general&#34;&gt;System Status - General&lt;/h4&gt;
&lt;p&gt;One of the first tools I usually install is 
&lt;a href=&#34;https://github.com/htop-dev/htop&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;htop&lt;/a&gt;. It is a widely available and fast process viewer written in C. You can use it to kill or renice a process interactively without needing to find its PID. An alternative to this is 
&lt;a href=&#34;https://github.com/nicolargo/glances&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;glances&lt;/a&gt;, &amp;ldquo;an eye on your system&amp;rdquo; written in Python. It has a lot more information, including disk usage, sensor temperatures, battery information (on laptops), etc. and can be extended with plugins. It can be used interactively on the CLI, but it also gives the option of running in client/server mode which is nifty.&lt;/p&gt;
&lt;p&gt;Similar to glances, 
&lt;a href=&#34;https://github.com/ClementTsang/bottom&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;bottom&lt;/a&gt; is a Rust program giving general system information including plots, but it does not have quite the same range of information to it as glances does.&lt;/p&gt;
&lt;h4 id=&#34;system-status---networking&#34;&gt;System Status - Networking&lt;/h4&gt;
&lt;p&gt;To see what is clogging up your internet pipes, try 
&lt;a href=&#34;https://github.com/raboof/nethogs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;nethogs&lt;/a&gt; written in C++. A nice rusty alternative is 
&lt;a href=&#34;https://github.com/imsnif/bandwhich&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;bandwhich&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;other&#34;&gt;Other&lt;/h2&gt;
&lt;p&gt;Trying to figure out when it&amp;rsquo;s a good time to speak with a colleague in a different time zone? Install the Python package 
&lt;a href=&#34;https://gitlab.com/anarcat/undertime&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;undertime&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Don&amp;rsquo;t want to remeber different package manager&amp;rsquo;s syntax? Install 
&lt;a href=&#34;https://github.com/icy/pacapt&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;pacapt&lt;/a&gt; and use ArchLinux&#39; pacman syntax on your system instead.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Setup an Arbitrary WSL2 Distro</title>
      <link>https://dmsenter89.github.io/post/22-11-setup-an-arbitrary-wsl2-distro/</link>
      <pubDate>Mon, 14 Nov 2022 22:34:25 -0500</pubDate>
      <guid>https://dmsenter89.github.io/post/22-11-setup-an-arbitrary-wsl2-distro/</guid>
      <description>&lt;p&gt;
&lt;a href=&#34;https://learn.microsoft.com/en-us/windows/wsl/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Windows Subsystem for Linux&lt;/a&gt; (WSL) is an important part of my daily work flow. Unfortunately, the main distro supplied by Windows
is Ubuntu, which - for a variety of reasons - is not exactly my favorite distro. Luckily, WSL2 allows you to import an arbitrary Linux distro
to use instead. I got the idea from 
&lt;a href=&#34;https://dev.to/bowmanjd/install-fedora-on-windows-subsystem-for-linux-wsl-4b26&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;an article (Dev.to)&lt;/a&gt;
by Jonathan Bowman explaining how to get Fedora up and running in WSL2. This article summarizes the
key points of Bowman&amp;rsquo;s post and includes information for my long time daily driver, 
&lt;a href=&#34;https://archlinux.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Arch Linux&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The short of it is that you can import a root filesystem tarball into WSL2 from Windows terminal
using the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;wsl --import &amp;lt;distro-name&amp;gt; &amp;lt;distro-target-location&amp;gt; &amp;lt;path-to-tarball&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once imported, you can launch into your distro using &lt;code&gt;wsl -d &amp;lt;distro-name&amp;gt;&lt;/code&gt;. The only question is
how to get the root filesystem for this import step.&lt;/p&gt;
&lt;p&gt;There are two options we can go with: using a pre-fabricated root filesystem (rootfs), or creating our own
using Docker.&lt;/p&gt;
&lt;h2 id=&#34;using-an-existing-root-filesystem&#34;&gt;Using an Existing Root Filesystem&lt;/h2&gt;
&lt;p&gt;Some distros publish these. For Arch Linux, you can find them on 
&lt;a href=&#34;https://gitlab.archlinux.org/archlinux/archlinux-docker/-/releases&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitLab&lt;/a&gt;.
Two main images are available: base and base-devel. The latter has the base-devel 
&lt;a href=&#34;https://archlinux.org/groups/x86_64/base-devel/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;package group&lt;/a&gt; pre-installed.&lt;/p&gt;
&lt;p&gt;For Fedora, you can head over to 
&lt;a href=&#34;https://github.com/fedora-cloud/docker-brew-fedora/tree/37/x86_64&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub&lt;/a&gt;
to get a copy of the rootfs. Note that for Fedora, the rootfs is merely part of the repo and not a separate release
page. You&amp;rsquo;ll be able to pick your base version of Fedora by switching branches in the repository.&lt;/p&gt;
&lt;p&gt;These rootfs images are usually compressed. Before you can use them with WSL2, the tarball needs to be extracted.
The Arch Linux rootfs can be extracted with zstd and the Fedora rootfs can be extracted using 7z.&lt;/p&gt;
&lt;h2 id=&#34;making-your-own-root-filesystem&#34;&gt;Making your Own Root Filesystem&lt;/h2&gt;
&lt;p&gt;Docker allows you to export a container to a root filesystem tarball:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker export -o &amp;lt;rootfs-name&amp;gt;.tar &amp;lt;container-or-image-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The neat thing here is that you can use either an image or a container name.&lt;/p&gt;
&lt;p&gt;Arch Linux images are available from 
&lt;a href=&#34;https://hub.docker.com/_/archlinux&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DockerHub&lt;/a&gt;. Available
tags include the above mentioned base and base-devel. Fedora is also available on 
&lt;a href=&#34;https://hub.docker.com/_/fedora&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DockerHub&lt;/a&gt;
and its tags include version numbers (e.g., 37 or 36).&lt;/p&gt;
&lt;h2 id=&#34;additional-setup&#34;&gt;Additional Setup&lt;/h2&gt;
&lt;p&gt;Once you have imported the distro you only have a barebones system available. Likely only the root user is
available, which is not ideal. You&amp;rsquo;ll want to install the packages you want to use and set up your own
user in addition to root. If you are building your own rootfs using Docker, you can build everything
interactively in your container by running &lt;code&gt;docker run -it &amp;lt;image-name&amp;gt;:&amp;lt;tag&amp;gt;&lt;/code&gt; to drop into a
shell and do all your setup there. Alternatively, you can create a Dockerfile with the basic setup
and build an image from that.&lt;/p&gt;
&lt;h3 id=&#34;arch-linux&#34;&gt;Arch Linux&lt;/h3&gt;
&lt;p&gt;Pacman won&amp;rsquo;t work out-of-the-box because it doesn&amp;rsquo;t ship with keys. You&amp;rsquo;ll need to run &lt;code&gt;pacman-keys --init&lt;/code&gt;
first. Install your favorite software using pacman, e.g.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pacman -Syu exa htop vim
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;User management and other common setup tasks are covered in the Arch Wiki&amp;rsquo;s 
&lt;a href=&#34;https://wiki.archlinux.org/title/General_recommendations#System_administration&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;General Recommendations&lt;/a&gt;.
Key tasks include 
&lt;a href=&#34;https://wiki.archlinux.org/title/Users_and_groups#User_management&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;adding a new user&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;useradd -m -G wheel $username
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;fedora&#34;&gt;Fedora&lt;/h3&gt;
&lt;p&gt;Make sure to run &lt;code&gt;dnf upgrade&lt;/code&gt; to get the latest version of your packages.
You may need to install either the &lt;code&gt;util-linux&lt;/code&gt; or &lt;code&gt;util-linux-core&lt;/code&gt; packages in order to get
the mount command working (used by WSL to mount the Windows filesystem). To be
able to add a non-root user with a password you&amp;rsquo;ll need to make sure that &lt;code&gt;passwd&lt;/code&gt; is installed.&lt;/p&gt;
&lt;p&gt;To add a non-root user in Fedora, use&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;useradd -G wheel $username 
passwd $username  # in interactive mode, you&#39;ll type in your password here
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;general-case&#34;&gt;General Case&lt;/h3&gt;
&lt;p&gt;In order to actually start the WSL instance as your non-root user, you&amp;rsquo;ll need
to edit &lt;code&gt;/etc/wsl.conf&lt;/code&gt; inside of your distro. If the user section doesn&amp;rsquo;t exist
yet, you can just run&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;echo -e &amp;quot;\n[user]\ndefault = ${username}\n&amp;quot; &amp;gt;&amp;gt; /etc/wsl.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Those are the basics to get you up and running. Not everything will necessarily
work smoothly out-of-the box as you may be missing some packages that you&amp;rsquo;re not
aware of until you need them, but overall I&amp;rsquo;ve had a positive experience with this
setup.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
