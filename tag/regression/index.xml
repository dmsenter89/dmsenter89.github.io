<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>regression | Michael&#39;s Site</title>
    <link>https://dmsenter89.github.io/tag/regression/</link>
      <atom:link href="https://dmsenter89.github.io/tag/regression/index.xml" rel="self" type="application/rss+xml" />
    <description>regression</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Mon, 08 May 2023 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://dmsenter89.github.io/images/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_2.png</url>
      <title>regression</title>
      <link>https://dmsenter89.github.io/tag/regression/</link>
    </image>
    
    <item>
      <title>Sampling Regression Lines</title>
      <link>https://dmsenter89.github.io/post/23-05-sample-regression-lines/</link>
      <pubDate>Mon, 08 May 2023 00:00:00 +0000</pubDate>
      <guid>https://dmsenter89.github.io/post/23-05-sample-regression-lines/</guid>
      <description>&lt;p&gt;
&lt;a href=&#34;https://dmsenter89.github.io/post/23-05-simple-regression-with-proc-mcmc/&#34;&gt;Last week&lt;/a&gt; we saw how to generate posterior samples using PROC MCMC for simple linear and logistic regression models. This week, I want to show how to sample regression lines from the data set returned by MCMC by plotting several sample regression linse on top of a scatter plot of the source data.&lt;/p&gt;
&lt;h2 id=&#34;writing-the-macro&#34;&gt;Writing the Macro&lt;/h2&gt;
&lt;p&gt;Since the majority of the steps are identical irrespective of what data set we use, and because we might want to use this iteretively during model building, I decided to write this up as a macro. To some degree this is required since I will be using a macro do-loop, which is only valid when embedded inside of a macro.&lt;/p&gt;
&lt;p&gt;This macro will assume we have fitted a simple linear model of the form&lt;/p&gt;
&lt;p&gt;\begin{aligned}
y_i &amp;amp;\sim \mathrm{Normal}(\mu_i, \sigma) \\&lt;br&gt;
\mu_i &amp;amp;= \beta_0 + \beta_1 x_i
\end{aligned}&lt;/p&gt;
&lt;h3 id=&#34;step-1-get-an-srs-sample&#34;&gt;Step 1: Get an SRS Sample&lt;/h3&gt;
&lt;p&gt;The first step is the simplest - selecting a subset of the posterior samples. This is easily achieved by calling 
&lt;a href=&#34;https://support.sas.com/rnd/app/stat/procedures/surveyselect.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PROC SURVEYSELECT&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sas&#34;&gt;proc surveyselect data=&amp;amp;posterior. method=srs n=&amp;amp;n.
                  out=SRS;
run;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;step-2-make-a-macro-list-of-parameters&#34;&gt;Step 2: Make a Macro List of Parameters&lt;/h3&gt;
&lt;p&gt;Next we need to generate a list of intercepts and slopes. I find it easiest to read those in PROC SQL using the &lt;code&gt;into&lt;/code&gt; operation. Additionally, we&amp;rsquo;ll also collect the $x$- and $y$-ranges of our data. This will be used to make sure our plot is centered on the scatter-plot values of our source data set.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sas&#34;&gt;proc sql noprint;
  select beta0, beta1 
  into :intercepts separated by &#39; &#39;,
       :slopes  separated by &#39; &#39;
  from SRS;

  select min(x), max(x),
         min(y), max(y)
  into :minx, :maxx,
       :miny, :maxy
  from &amp;amp;ds.;
quit;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;step-3-macro-loop-to-add-lines-to-a-scatter-plot&#34;&gt;Step 3: Macro-Loop to Add Lines to a Scatter Plot&lt;/h3&gt;
&lt;p&gt;Now all the parts have been assembled and you can call PROC SGPLOT. We use the 
&lt;a href=&#34;https://go.documentation.sas.com/doc/en/pgmsascdc/v_031/grstatproc/p1lcbd3lhs3t3bn1jk6d8sjt2yqx.htm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;scatter&lt;/a&gt; statement to create a scatter plot of the source data. Then we use a do-loop to iteratively paste different 
&lt;a href=&#34;https://go.documentation.sas.com/doc/en/pgmsascdc/v_031/grstatproc/n1h6n82pw2uqo6n10avwmph63r7o.htm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;lineparm&lt;/a&gt; statements corresponding to our different samples into the SGPLOT statement. Lastly, use the 
&lt;a href=&#34;https://go.documentation.sas.com/doc/en/pgmsascdc/v_031/grstatproc/n0n6uml63c6h8dn16phbd1arm9g9.htm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;xaxis&lt;/a&gt; and 
&lt;a href=&#34;https://go.documentation.sas.com/doc/en/pgmsascdc/v_031/grstatproc/n0n6uml63c6h8dn16phbd1arm9g9.htm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;yaxis&lt;/a&gt; statements to focus the graph on the scatter plot data, and not forcing the x-intercepts of the different fitted lines into&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sas&#34;&gt;proc sgplot data=&amp;amp;ds. noautolegend;
  scatter x=x y=y;
  %do i = 1 %to &amp;amp;n.;
    lineparm x=0 y=%scan(&amp;amp;intercepts, &amp;amp;i, &#39; &#39;) 
         slope=%scan(&amp;amp;slopes, &amp;amp;i, &#39; &#39;) / transparency=0.7;
  %end;

  xaxis min=&amp;amp;minx. max=&amp;amp;maxx.;
  yaxis min=&amp;amp;miny. max=&amp;amp;maxy.;
run;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;calling-the-macro&#34;&gt;Calling the Macro&lt;/h2&gt;
&lt;p&gt;And that&amp;rsquo;s it. Assuming we declared the macro as follows&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sas&#34;&gt;%macro sample_regression(ds=, posterior=, n=);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;we can now call it.&lt;/p&gt;
&lt;p&gt;As a particular example, let&amp;rsquo;s run PROC MCMC&amp;rsquo;s getting started example 1 straight from 
&lt;a href=&#34;https://github.com/sassoftware/doc-supplement-statug/blob/main/Examples/m-n/mcmcgs1.sas&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sas&#34;&gt;filename url gs1 &#39;https://raw.githubusercontent.com/sassoftware/doc-supplement-statug/main/Examples/m-n/mcmcgs1.sas&#39;;
%include gs1;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this example, we predict weight based on height in the &lt;code&gt;sashelp.class&lt;/code&gt; data set. The posterior samples are available as &lt;code&gt;work.classout&lt;/code&gt;. We&amp;rsquo;ll want to rename the height and weight variables to $x$ and $y$ in order to work with the chosen macro names. This is easily accomplished by using the &lt;code&gt;rename&lt;/code&gt; statement in the macro call itself. We&amp;rsquo;ll call it with $n=15$.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sas&#34;&gt;%sample_regression(ds=sashelp.class(rename=(Height=x Weight=y)),
                  posterior=work.classout,
                  n=15);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will produce the following output:&lt;/p&gt;





  
  











&lt;figure &gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://dmsenter89.github.io/post/23-05-sample-regression-lines/class-regression-sample_hu8718c9b6d2106aec942f1d2ab5f5552b_53162_2000x2000_fit_lanczos_2.png&#34; &gt;


  &lt;img data-src=&#34;https://dmsenter89.github.io/post/23-05-sample-regression-lines/class-regression-sample_hu8718c9b6d2106aec942f1d2ab5f5552b_53162_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;640&#34; height=&#34;480&#34;&gt;
&lt;/a&gt;



&lt;/figure&gt;

&lt;p&gt;With slight modifications you can also use this macro to help you refine your priors. By using the&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sas&#34;&gt;model general(0);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;statement in PROC MCMC in lieu of a regular model you will get estimates of the prior parameters. See the 
&lt;a href=&#34;https://go.documentation.sas.com/doc/en/pgmsascdc/v_031/statug/statug_mcmc_examples01.htm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;documentation&lt;/a&gt; for examples.&lt;/p&gt;
&lt;!-- 
```sas sample-regression.sas
/*
 * This code was generated for the blog post &#34;Sampling Regression Lines&#34;
 * available at dmsenter89.github.io/post/23-05-sample-regression-lines/
 *
 * Author: Michael Senter, PhD
 */

&lt;&lt;&lt;macro-first-line&gt;&gt;&gt;
&lt;&lt;&lt;srs&gt;&gt;&gt;

&lt;&lt;&lt;parameter-list&gt;&gt;&gt;

&lt;&lt;&lt;lineparm&gt;&gt;&gt;
%mend sample_regression;

&lt;&lt;&lt;mcmc-gs1&gt;&gt;&gt;

&lt;&lt;&lt;macro-call&gt;&gt;&gt;
```
--&gt;
</description>
    </item>
    
    <item>
      <title>Simple Regression With PROC MCMC</title>
      <link>https://dmsenter89.github.io/post/23-05-simple-regression-with-proc-mcmc/</link>
      <pubDate>Tue, 02 May 2023 00:00:00 +0000</pubDate>
      <guid>https://dmsenter89.github.io/post/23-05-simple-regression-with-proc-mcmc/</guid>
      <description>&lt;p&gt;In this post I&amp;rsquo;ll show how to fit simple linear and logistic regression models using the 
&lt;a href=&#34;https://support.sas.com/rnd/app/stat/procedures/mcmc.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;MCMC&lt;/a&gt; procedure in SAS. Note that the point of this post is to show how the mathematical model is translated into PROC MCMC syntax and not to discuss the method itself. I will include links to relevant sections in Johnson, Ott, and Dogucu (2022) if you&amp;rsquo;d like to read more about Bayesian modeling.&lt;/p&gt;
&lt;h2 id=&#34;the-mcmc-statement&#34;&gt;The MCMC Statement&lt;/h2&gt;
&lt;p&gt;The basic 
&lt;a href=&#34;https://go.documentation.sas.com/doc/en/pgmsascdc/9.4_3.4/statug/statug_mcmc_syntax.htm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;syntax&lt;/a&gt; for MCMC is as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nohighlight&#34;&gt;proc mcmc &amp;lt;options&amp;gt;;
    parms parameter &amp;lt;=&amp;gt; number &amp;lt;/options&amp;gt;;
    prior parameter ~ distribution;
    programming statements;
    model varaiable ~ distribution &amp;lt;/options&amp;gt;; 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This covers the basic components of most Bayesian models - the model itself (&lt;code&gt;model&lt;/code&gt;), the parameters that need to be fit (&lt;code&gt;parms&lt;/code&gt;), and their prior distribution (&lt;code&gt;prior&lt;/code&gt;). Note that PROC MCMC requires you to always specify your priors, unlike some Bayesian modeling software that will default to some diffuse priors when they are omitted from the problem statement.&lt;/p&gt;
&lt;p&gt;The most common options you&amp;rsquo;ll use in the MCMC statement will be&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;data=&lt;/code&gt; the name of the input data set.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;outpost=&lt;/code&gt; the name of the output data set for posterior samples of parameters.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nbi=&lt;/code&gt; the number of burn-in iterations.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nmc=&lt;/code&gt; the number of MCMC iterations, excluding the burn-in iterations.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;seed=&lt;/code&gt; specify a random seed for the the simulation.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;thin=&lt;/code&gt; specify the thinning rate; see 
&lt;a href=&#34;https://go.documentation.sas.com/doc/en/pgmsascdc/9.4_3.4/statug/statug_introbayes_sect016.htm#statug.introbayes.bayesburnin&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt; for more details.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The names and function calls for the included distributions are described in the documentation on the 
&lt;a href=&#34;https://go.documentation.sas.com/doc/en/pgmsascdc/9.4_3.4/statug/statug_mcmc_syntax09.htm#statug_mcmc002612&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;MODEL statement&lt;/a&gt;. Their density definitions are documented 
&lt;a href=&#34;https://go.documentation.sas.com/doc/en/pgmsascdc/9.4_3.4/statug/statug_mcmc_details17.htm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;a-simple-linear-model&#34;&gt;A Simple Linear Model&lt;/h2&gt;
&lt;p&gt;A basic linear model looks something like this:&lt;/p&gt;
&lt;p&gt;\begin{aligned}
y_i &amp;amp;\sim \mathrm{Normal}(\mu_i, \sigma) \\&lt;br&gt;
\mu_i &amp;amp;= \beta_0 + \beta_1 x_i
\end{aligned}&lt;/p&gt;
&lt;p&gt;which will need to be combined with priors for $\beta_0$, $\beta_1$, and $\sigma$. Assume we have a data set &lt;code&gt;work.mydata&lt;/code&gt; that contains two variables: our predictor &lt;code&gt;x&lt;/code&gt; and our measured variable &lt;code&gt;y&lt;/code&gt;. Assume we use the above model together with the following priors:&lt;/p&gt;
&lt;p&gt;\begin{aligned}
\beta_0 &amp;amp;\sim \mathrm{Normal}(0, 10) \\&lt;br&gt;
\beta_1 &amp;amp;\sim \mathrm{Normal}(0, 10) \\&lt;br&gt;
\sigma &amp;amp;\sim \mathrm{Uniform}(0,50).
\end{aligned}&lt;/p&gt;
&lt;p&gt;Translating this into PROC MCMC is straightforward. Even though we can specify the statements in any order, it is common to define the model &amp;ldquo;upside down&amp;rdquo; so that each line contains only variables that have already been defined. This is for convenience, so you don&amp;rsquo;t forget to specify something before hitting &amp;ldquo;run.&amp;rdquo;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sas&#34;&gt;proc mcmc data=mydata
      outpost=posterior /* posterior sim */
      nmc=2000; /* # of data points in posterior */
    /* define the parameters. Optionally give an initial value */
    parms beta0 0 beta1 1;
    parms sigma; /* no initial value - mcmc finds its own */
    
    * define your priors;
    prior beta: ~ normal(mean=0, sd=10);
    prior sigma ~ uniform(0, 50);
    
    * define the mean and the model;
    mu = beta0 + beta1*x;
    model y ~ normal(mu, sd=sigma);
run;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For more info on simple regression, check out 
&lt;a href=&#34;https://www.bayesrulesbook.com/chapter-9.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;chapters 9-11&lt;/a&gt; in Bayes Rules!&lt;/p&gt;
&lt;h2 id=&#34;a-simple-logistic-model&#34;&gt;A Simple Logistic Model&lt;/h2&gt;
&lt;p&gt;A basic logistic model will look as follows:&lt;/p&gt;
&lt;p&gt;\begin{aligned}
y_i &amp;amp;\sim \mathrm{Binomial}(n_i, p_i) \\&lt;br&gt;
\mathrm{logit}(p_i) &amp;amp;= \beta_0 + \beta_1 x_i
\end{aligned}&lt;/p&gt;
&lt;p&gt;combined with appropriate priors for $\beta_0$, $\beta_1$. Here $y_i$ is a positive integer response, $n_i$ is a count, and $x_i$ is still our predictor. In many medical studies we are interested in the special case where $y_i \in \{0,1\}$ so that the model becomes&lt;/p&gt;
&lt;p&gt;\begin{aligned}
y_i &amp;amp;\sim \mathrm{Bern}(p_i) \\&lt;br&gt;
\mathrm{logit}(p_i) &amp;amp;= \beta_0 + \beta_1 x_i.
\end{aligned}&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s assume a diffuse prior like this:&lt;/p&gt;
&lt;p&gt;\begin{aligned}
\beta_0 &amp;amp;\sim \mathrm{Normal}(0, 100) \\&lt;br&gt;
\beta_1 &amp;amp;\sim \mathrm{Normal}(0, 100).
\end{aligned}&lt;/p&gt;
&lt;p&gt;Then we can translate to PROC MCMC as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sas&#34;&gt;proc mcmc data=mydata
      outpost=posterior /* posterior sim */
      nmc=2000; /* # of data points in posterior */
    parms (beta0 beta1) 0;
    prior beta: ~ normal(0, sd=100);

    /* now define the logistic part: */
    p = logistic(beta0 + beta1*x);
    model y ~ bern(p);
run;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Often we are not so much directly interested in the $\beta$ coefficients, but in the odds $e^{\beta_0}$ and the multiplicative change in odds $e^{\beta_1}$. While these values can be calculated and analyzed from the &lt;code&gt;outpost&lt;/code&gt; data set, we can use the &lt;code&gt;nodata&lt;/code&gt; block (delimited by &lt;code&gt;beginnodata&lt;/code&gt; and &lt;code&gt;endnodata&lt;/code&gt; statements) to directly calculate these values in our simulation. The amended procedure reads like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sas&#34;&gt;proc mcmc data=mydata
      outpost=posterior
      nmc=2000
      monitor=(odds modds);
    parms (beta0 beta1) 0;
    prior beta: ~ normal(0, sd=100);

    beginnodata;
      odds = exp(beta0);
      modds = exp(beta1);
    endnodata;

    p = logistic(beta0 + beta1*x);
    model y ~ bern(p);
run;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;See 
&lt;a href=&#34;https://www.bayesrulesbook.com/chapter-13.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;chapter 13&lt;/a&gt; in Bayes Rules! for more info on logistic regression models.&lt;/p&gt;
&lt;h2 id=&#34;adding-a-random-effect&#34;&gt;Adding a Random-Effect&lt;/h2&gt;
&lt;p&gt;Random-effects, also known as hierarchical modeling, looks at group structures in the data seta nd models group-specific effects. In a clinical setting, this might be the study site.&lt;/p&gt;
&lt;p&gt;As a simple example, assume we have a data set &lt;code&gt;ht&lt;/code&gt; containing the height (&lt;code&gt;h&lt;/code&gt;) and sex (&lt;code&gt;s&lt;/code&gt;) of a population sample. Assume we are interested in modeling the distribution of height in our data set. We know that on average males are taller than females (mean 167 cm vs 156 cm based on NHANES 2006). We could build a model similar to this:&lt;/p&gt;
&lt;p&gt;\begin{aligned}
h_i &amp;amp;\sim \mathrm{Normal}(\mu_i, \sigma) \\&lt;br&gt;
\mu_i &amp;amp;= \alpha_{\mathrm{sex[i]}} \\&lt;br&gt;
\alpha_j &amp;amp;\sim \mathrm{Normal}(160, 20) \quad \text{for } j=1,2 \\&lt;br&gt;
\sigma &amp;amp;\sim \mathrm{Uniform}(0,50).
\end{aligned}&lt;/p&gt;
&lt;p&gt;In SAS, the random effect is specified with the 
&lt;a href=&#34;https://go.documentation.sas.com/doc/en/pgmsascdc/9.4_3.4/statug/statug_mcmc_gettingstarted03.htm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;random&lt;/a&gt; statement. We specify the categories with the &lt;code&gt;subject&lt;/code&gt; keyword in the random statement. SAS will then automatically create the necessary number of parameters for the random effect. Our model translates to the following MCMC call:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sas&#34;&gt;proc mcmc data=ht
      outpost=posterior
      nmc=2000;
    parms sigma 5 sigmaA 6;
    prior sigma: ~ uniform(0,50);

    random alpha ~ normal(160, sd=sigmaA) subject=s monitor=(alpha);
    mu = alpha;
    model h ~ normal(mu, sd=sigma);
run;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Assuming $s\in\{1,2\}$ this will cause SAS to create two alpha variables for the two levels of &lt;code&gt;s&lt;/code&gt;: &lt;code&gt;alpha_1&lt;/code&gt; and &lt;code&gt;alpha_2&lt;/code&gt;. Had &lt;code&gt;s&lt;/code&gt; been a character variable, say with values m and f, then SAS would have created &lt;code&gt;alpha_m&lt;/code&gt; and &lt;code&gt;alpha_f&lt;/code&gt; instead.&lt;/p&gt;
&lt;p&gt;For more information on this, check out 
&lt;a href=&#34;https://www.bayesrulesbook.com/chapter-15.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;unit IV&lt;/a&gt; of Bayes Rules!&lt;/p&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;p&gt;Johnson, A. A., Ott, M. Q., and Dogucu, M. (2022), &lt;em&gt;Bayes Rules!: An Introduction to Applied Bayesian Modeling&lt;/em&gt;, Boca Raton, FL: CRC Press, DOI: 
&lt;a href=&#34;https://doi.org/10.1201/9780429288340&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;10.1201/9780429288340&lt;/a&gt;. Available online at 
&lt;a href=&#34;https://www.bayesrulesbook.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;www.bayesrulesbook.com&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
